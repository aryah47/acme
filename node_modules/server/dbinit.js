//dbinit.js
"use strict";

var Client = require('mariasql');
var Deferred = require( "JQDeferred");
var _ = require('underscore');
var dbq = require('server/dbq');

var c = null;


var createFn = function (table, values) {
    var dfd = Deferred();
    dbq.basicDbErr(
        c.query(dbq.createQ(table, _.keys(values))(values))
            .on('result', function (dbres) {
                dbq.basicDbErr(
                    dbres.on('end', function (info) {
                        dfd.resolve(info);
                    }));
            }));
    return dfd.promise();
};

var createAllFn = function (table, createList, prefix) {
    return Deferred.when.apply(
        this, _.map(createList, function (el) {

            var dict = {};

            if (prefix) {
                dict[prefix] = el;
            } else {
                dict = el;
            }
            createFn(table, dict);
        })
    ).promise();
};

var ROOT_ID = 1;
var SIDE_NAV = 2;
var TOP_NAV = 3;
var BOTTOM_NAV = 4;
var NAV_ITEM = 5;
var NAV_ITEM_TMPL = 6;
var PG = 7;
var FORM = 8;
var CAL = 9;
var BLOG = 10;
var LIST = 11;
var IDX = 12;

var ROOT_USR = 1;
var ROOT_GRP = 1;
var ROOT_PG = 1;



var createPg =  function (nsId, catId, id, url, content) {
    return Deferred.when(function () {
        var list = [];
        if (content) {
            list += createFn('Contents', content);
        }

        var pg = {
            "id" : id,
            "url" : url,
            "activeNsId" : nsId
        };
        if (content) {
            pg['activeContId'] = content['id'];
        }
        list += createFn('Pages', pg);

        var rev = {
            "nsId" : nsId,
            "pgId" : id,
            "catPgId" :catId,
            "userId" : ROOT_USR,
            "grpId" : ROOT_GRP
        };
        if (content) {
            rev['contId'] = content['id'];
        }
        list += createFn('Revisions', rev);
        return list;
    }()).promise();
};

var createAllPg = function (nsId, catId, idx, prefix, list) {
    return Deferred.when.apply(
        this, _.map(
            _.zip(list, _.range(idx, idx + list.length)),
            function (el) {
                var url = el[0];
                var idx = el[1];
                createPg(nsId, catId, idx , prefix + url);
            })
    ).promise();
};



module.exports = {
    connect : function (con) {
        c = con;
        dbq.connect(c);
    }
    , createNs : function () {
        return Deferred.when(
            createAllFn('Namespaces',
                        [{'name': 'root', 'id' : ROOT_ID}

                         //  , {"name" : 'ns'), {"name" : 'usr'}
                         //  , {"name" : 'grp'}, {"name" : 'tag'}
                         //  , {"name" : 'rev'}

                         , {"name" : 'sideNav', 'id' : SIDE_NAV}
                         , {"name" : 'topNav', 'id' : TOP_NAV}
                         , {"name" : 'bottomNav', 'id' : BOTTOM_NAV}
                         , {"name" : 'navItem', 'id' : NAV_ITEM}
                         , {"name" : 'navItemTmpl', 'id' : NAV_ITEM_TMPL}
                         , {"name" : 'pg', 'id' : PG}
                         , {"name" : 'form', 'id' : FORM}
                         , {"name" : 'cal', 'id' : CAL}
                         , {"name" : 'blog', 'id' : BLOG}
                         , {"name" : 'list', 'id' : LIST}

                         , {"name" : 'idx', 'id' : IDX}
                        ])
        ).promise();
    }
    , mkFn : function () {
        var dfd = Deferred();
        _.map([
            c.query('CREATE TABLE IF NOT EXISTS Namespaces ('
                    + 'id INT AUTO_INCREMENT PRIMARY KEY,'
                    + 'name VARCHAR(30) UNIQUE'
                    + ')')

            , c.query('CREATE TABLE IF NOT EXISTS Groups ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY,'
                      + 'name VARCHAR(30) UNIQUE'
                      + ')')

            , c.query('CREATE TABLE IF NOT EXISTS Users ('
                      + 'id INT  AUTO_INCREMENT PRIMARY KEY,'
                      + 'alias VARCHAR(30),'
                      + 'eMail VARCHAR(50),'

                      + 'UNIQUE (alias, eMail)'
                      + ')')

            , c.query('CREATE TABLE IF NOT EXISTS UserGroups ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY,'
                      + 'userId INT NOT NULL,'
                      + 'groupId INT NOT NULL,'

                      + 'UNIQUE (userId, groupId)'
                      + ')')

            , c.query('CREATE TABLE IF NOT EXISTS Contents ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY,'

                      // content
                      + 'html LONGTEXT,'
                      + 'markup LONGTEXT,'
                      + 'markupType CHAR(30),'
                      + 'data LONGBLOB,'

                      // if external file
                      + 'filePath VARCHAR(255),'
                      + 'fileUrl VARCHAR(255),'
                      + 'fileService CHAR(30),'
                      + 'mimeType CHAR(30)'

                      + ')')

            , c.query('CREATE TABLE IF NOT EXISTS Pages ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY,'
                      + 'url CHAR(30),' // suffix ends with 'name'

                      //TODO w/o 'name', reference problems if denormalized!

                      //denormalizing from rev
                      + 'activeNsId INT,'
                      + 'activeCatPgId INT,'
//                      + 'activeName CHAR(30) NULL,'

                      + 'FOREIGN KEY (activeNsId) REFERENCES Namespaces(id),'
                      + 'FOREIGN KEY (activeCatPgId) REFERENCES Pages(id),'
//                      + 'FOREIGN KEY (activeName) REFERENCES Revisions(name),'

                      //active content links frzom rev
                      + 'activeContId INT,'
                      + 'activeTmplId INT,'

                      + 'FOREIGN KEY (activeContId) REFERENCES Contents(id),'
                      + 'FOREIGN KEY (activeTmplId) REFERENCES Contents(id),'


                      //denormalizind from redir
                      + 'activeRedirUrl CHAR(30),'
                      + 'activeUrlChange BIT,'

                      //indicies
//                      + 'INDEX (activeName),'
                      + 'INDEX (url)'
                      + ')')

            , c.query('CREATE TABLE IF NOT EXISTS Revisions ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY,'

                      // url links
                      + 'nsId INT NOT NULL,'
                      + 'pgId INT NOT NULL,'
                      + 'catPgId INT,' //root categories don't have their own roots


                      + 'FOREIGN KEY (nsId) REFERENCES Namespaces(id),'
                      + 'FOREIGN KEY (pgId) REFERENCES Pages(id),'
                      + 'FOREIGN KEY (catPgId) REFERENCES Pages(id),'


                      // permissions
                      + 'userId INT NOT NULL,'
                      + 'grpId INT NOT NULL,'

                      + 'FOREIGN KEY (userId) REFERENCES Users(id),'
                      + 'FOREIGN KEY (grpId) REFERENCES Groups(id),'

                      + "crud BIT(12),"

                      // change info
                      + 'changeTimestamp TIMESTAMP,'
                      + 'name CHAR(30),' // final part of URL
                      + 'revComment VARCHAR(255),'

                      // change contents
                      + 'contId INT,'
                      + 'tmplId INT,'

                      + 'FOREIGN KEY (contId) REFERENCES Contents(id),'
                      + 'FOREIGN KEY (tmplId) REFERENCES Contents(id),'

                      // indicies
                      + 'UNIQUE (pgId),' //changeTimestamp,
                      + 'INDEX (nsId),'
                      + 'INDEX (name)'
                      + ')')

            , c.query('CREATE TABLE IF NOT EXISTS Redirects ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY,'
                      + 'revId INT UNIQUE,'
                      + 'redirUrl CHAR(30),'
                      + 'urlChange BIT,'

                      + 'FOREIGN KEY (revId) REFERENCES Revisions(id)'
                      + ')')

            , c.query('CREATE TABLE IF NOT EXISTS Tags ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY,'
                      + 'childRevId INT NOT NULL,'
                      + 'parentPgId INT NOT NULL,'

                      + 'FOREIGN KEY (parentPgId) REFERENCES Pages(id),'
                      + 'FOREIGN KEY (childRevId) REFERENCES Revisions(id),'

                      + 'UNIQUE (childRevId, parentPgId),'
                      + 'INDEX (parentPgId)'
                      + ')')
        ], function (el) {
            return el
                .on('error', function (err) {
                    console.log(err);
                    dfd.resolve({'_err': err});
                })
                .on('abort', function () {
                    dfd.resolve({'_err': ABORT_MSG});
                })
        });
        dfd.resolve();

        return dfd.promise();
    }
    , roots : function () {
        return Deferred.when(
            createFn('Groups', {'id': ROOT_GRP, 'name':'administrators'})
            , createFn('Users', {'id': ROOT_USR, 'alias':'superuser', 'eMail': 'info@zadarsnova.hr'})
            , createFn('UserGroups', {'id':1, 'userId': ROOT_USR, 'groupId' : ROOT_GRP})
            , createPg(PG, null, ROOT_PG, 'root')
        ).promise();
    }
    , createSideNav : function () {
        var START_PG = ROOT_PG + 1;
        return Deferred.when(
            createPg(SIDE_NAV, ROOT_PG, START_PG, 'navs/side'), //group template
            createPg(NAV_ITEM_TMPL, START_PG, START_PG + 1, 'navs/side/item'), //item template
            createAllPg(NAV_ITEM, START_PG, START_PG + 2, 'navs/side/', ['news', 'program', 'izlozbe', 'prosvjedi'])
        ).promise();
    }

    , createTopNav : function () {
        var START_PG = ROOT_PG + 7;
        var ACME_PG = START_PG + 2;
        var PLATFORMA_PG = START_PG + 3;
        return Deferred.when(
            createPg(TOP_NAV, ROOT_PG, START_PG, 'navs/top'), //group template
            createPg(NAV_ITEM_TMPL, START_PG, START_PG + 1, 'navs/top/item'), //item template

            createAllPg(NAV_ITEM, START_PG, START_PG + 2, 'navs/top/', ['acme', 'platforma']),
            createPg(NAV_ITEM_TMPL, ACME_PG, START_PG + 4, 'navs/top/acme/item'), //item template
            createAllPg(NAV_ITEM, ACME_PG, START_PG + 5, 'navs/top/acme/', ['front', 'news', 'kalendar', 'program', 'izlozbe', 'prosvjedi']),

            createPg(NAV_ITEM_TMPL, PLATFORMA_PG, START_PG + 11, 'navs/top/platforma/item'), //item template
            createAllPg(NAV_ITEM, PLATFORMA_PG, START_PG + 12, 'navs/top/platforma/', ['about', 'index', 'kalendar', 'aktivnosti'])
        ).promise();
    }

    , createBottomNav : function () {
        var START_PG = ROOT_PG + 7 + 16;
        return Deferred.when(
            createPg(BOTTOM_NAV, ROOT_PG, START_PG, 'navs/bottom'), //group template
            createPg(NAV_ITEM_TMPL, START_PG, START_PG + 1, 'navs/bottom/item'), //item template
            createAllPg(NAV_ITEM, START_PG, START_PG + 2, 'navs/bottom/', ['front', 'acme', 'pop', 'kalendar'])
        ).promise();
    }

    , createForm : function () {
        return Deferred.when(
            createPg('form')
        ).promise();
    }

    , createCal : function () {
        // TODO read a csv file of activities
        // TODO a content with json repr of each csv entry, ns cal
        // TODO cal template
    }
}
