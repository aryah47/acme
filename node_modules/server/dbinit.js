//dbinit.js
"use strict";

var Client = require('mariasql');
var Deferred = require( "JQDeferred");
var _ = require('underscore');
var dbq = require('server/dbq');
var csv = require('csv');

var c = null;


var createFn = function (table, values) {
    var dfd = Deferred();
    dbq.basicDbErr(
        c.query(dbq.createQ(table, _.keys(values))(values))
            .on('result', function (dbres) {
                dbq.basicDbErr(
                    dbres.on('end', function (info) {
                        dfd.resolve(info);
                    }));
            }));
    return dfd.promise();
};

var createAllFn = function (table, createList, prefix) {
    return Deferred.when.apply(
        this, _.map(createList, function (el) {

            var dict = {};

            if (prefix) {
                dict[prefix] = el;
            } else {
                dict = el;
            }
            createFn(table, dict);
        })
    ).promise();
};

var ROOT_ID = 1;
var SIDE_NAV = 2;
var TOP_NAV = 3;
var BOTTOM_NAV = 4;
var NAV_ITEM = 5;
var PG = 7;
var FORM = 8;
var CAL = 9;
var BLOG = 10;
var LIST = 11;
var IDX = 12;
var TAG = 13;

var ROOT_USR = 1;
var ROOT_GRP = 1;

var ROOT_PG = 1;
var CAL_ROOT_PG = 2;
var FORM_ROOT_PG = 3;
var NAV_ROOT_PG = 4; // side, top, bottom, navitem



var createPg =  function (nsId, catId, id, url, content, tag) {
    var dfd = Deferred();

    var pageFn = function (contInfo) {
        var contId = contInfo && contInfo['insertId'] || content['id'];
        var pg = {
            "url" : url
            , "activeNsId" : nsId
        };
        if (id) {
            pg['id'] = id;
        }
        if (content) {
            pg['activeContId'] = contId;
        }

        createFn('Pages', pg).then(function (pgInfo) {
            var pgId = pgInfo && pgInfo['insertId'] || id;
            var rev = {
                "nsId" : nsId
                , "pgId" : pgId
                , "userId" : ROOT_USR
                , "grpId" : ROOT_GRP
            };
            if(catId) {
                rev['catPgId'] = catId;
            }
            if (content) {
                rev['contId'] = contId;
            }
            createFn('Revisions', rev).then(function (revInfo) {
                if (tag) {
                    createFn('Tags', tag).then (function(tagInfo) {
                        dfd.resolve(revInfo);
                    })
                } else {
                    dfd.resolve(revInfo);
                }
            });
        });
    };

    if (content) {
        createFn('Contents', content).then(function (contInfo) {
            pageFn(contInfo);
        });
    } else {
        pageFn();
    }
    return dfd.promise();
};

var createAllPg = function (nsId, catId, idx, prefix, list, contentList) {
    return Deferred.when.apply(
        this, _.map(
            _.zip(list, _.range(idx, idx + list.length), contentList),
            function (el) {
                var url = el[0];
                var idx = el[1];
                var content = el[2];
                createPg(nsId, catId, idx , prefix + url, content);
            })
    ).promise();
};



module.exports = {
    connect : function (con) {
        c = con;
        dbq.connect(c);
    }
    , createFn : createFn
    , mkFn : function () {
        var dfd = Deferred();
        _.map([
            c.query('CREATE TABLE IF NOT EXISTS Namespaces ('
                    + 'id INT AUTO_INCREMENT PRIMARY KEY'
                    + ', name VARCHAR(30) UNIQUE'
                    + ')')
            , c.query('CREATE TABLE IF NOT EXISTS Groups ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY'
                      + ', name VARCHAR(30) UNIQUE'
                      + ')')
            , c.query('CREATE TABLE IF NOT EXISTS Users ('
                      + 'id INT  AUTO_INCREMENT PRIMARY KEY'
                      + ', alias VARCHAR(30)'
                      + ', eMail VARCHAR(50)'

                      + ', UNIQUE (alias, eMail)'
                      + ')')
            , c.query('CREATE TABLE IF NOT EXISTS UserGroups ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY'
                      + ', userId INT NOT NULL'
                      + ', groupId INT NOT NULL'

                      + ', UNIQUE (userId, groupId)'
                      + ')')
            , c.query('CREATE TABLE IF NOT EXISTS Contents ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY'

                      // inline content - any combination
                      + ', html LONGTEXT'
                      + ', markup LONGTEXT'
                      + ', markupType CHAR(30)'
                      + ', data LONGBLOB'

                      // external content - one of
                      + ', filePath VARCHAR(255)'
                      + ', fileUrl VARCHAR(255)'
                      + ', tableName CHAR(30)'
                      + ', fileService CHAR(30)'
                      + ', mimeType CHAR(30)'

                      + ')')
            , c.query('CREATE TABLE IF NOT EXISTS Pages ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY'
                      + ', url CHAR(30)' // suffix ends with 'name'

                      //TODO w/o 'name', reference problems if denormalized!

                      //denormalizing from rev
                      + ', activeNsId INT'
                      + ', activeCatPgId INT'
//                      + ', activeName CHAR(30) NULL'

                      + ', FOREIGN KEY (activeNsId) REFERENCES Namespaces(id)'
                      + ', FOREIGN KEY (activeCatPgId) REFERENCES Pages(id)'
//                      + ', FOREIGN KEY (activeName) REFERENCES Revisions(name)'

                      //active content links frzom rev
                      + ', activeContId INT'
                      + ', activeTmplId INT'

                      + ', FOREIGN KEY (activeContId) REFERENCES Contents(id)'
                      + ', FOREIGN KEY (activeTmplId) REFERENCES Contents(id)'

                      //denormalizind from redir
                      + ', activeRedirUrl CHAR(30)'
                      + ', activeUrlChange BIT'

                      //indicies
//                      + ', INDEX (activeName)'
                      + ', INDEX (url)'
                      + ')')
            , c.query('CREATE TABLE IF NOT EXISTS Revisions ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY'

                      // url links
                      + ', nsId INT NOT NULL'
                      + ', pgId INT NOT NULL'
                      + ', catPgId INT,' //root categories don't have their own roots

                      + ', FOREIGN KEY (nsId) REFERENCES Namespaces(id)'
                      + ', FOREIGN KEY (pgId) REFERENCES Pages(id)'
                      + ', FOREIGN KEY (catPgId) REFERENCES Pages(id)'

                      // permissions
                      + ', userId INT NOT NULL'
                      + ', grpId INT NOT NULL'

                      + ', FOREIGN KEY (userId) REFERENCES Users(id)'
                      + ', FOREIGN KEY (grpId) REFERENCES Groups(id)'

                      + ", crud BIT(12)"

                      // change info
                      + ', changeTimestamp TIMESTAMP'
                      + ', name CHAR(30)' // final part of URL
                      + ', revComment VARCHAR(255)'

                      // change contents
                      + ', contId INT'
                      + ', tmplId INT'

                      + ', FOREIGN KEY (contId) REFERENCES Contents(id)'
                      + ', FOREIGN KEY (tmplId) REFERENCES Contents(id)'

                      // indicies
                      + ', UNIQUE (pgId)' //changeTimestamp,
                      + ', INDEX (nsId)'
                      + ', INDEX (name)'
                      + ')')
            , c.query('CREATE TABLE IF NOT EXISTS Redirects ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY'
                      + ', revId INT UNIQUE'
                      + ', redirUrl CHAR(30)'
                      + ', urlChange BIT'

                      + ', FOREIGN KEY (revId) REFERENCES Revisions(id)'
                      + ')')
            , c.query('CREATE TABLE IF NOT EXISTS Tags ('
                      + 'id INT AUTO_INCREMENT PRIMARY KEY'
                      + ', childRevId INT NOT NULL'
                      + ', parentPgId INT NOT NULL'

                      + ', FOREIGN KEY (parentPgId) REFERENCES Pages(id)'
                      + ', FOREIGN KEY (childRevId) REFERENCES Revisions(id)'

                      + ', UNIQUE (childRevId, parentPgId)'
                      + ', INDEX (parentPgId)'
                      + ')')
        ], function (el) {
            return el
                .on('error', function (err) {
                    console.log(err);
                    dfd.resolve({'_err': err});
                })
                .on('abort', function () {
                    dfd.resolve({'_err': ABORT_MSG});
                })
        });
        dfd.resolve();

        return dfd.promise();
    }
    , createNs : function () {
        return Deferred.when(
            createAllFn('Namespaces',
                        [{'name': 'root', 'id' : ROOT_ID}

                         //  , {"name" : 'ns'), {"name" : 'usr'} //different tables, no need
                         //  , {"name" : 'grp'}, {"name" : 'tag'}
                         //  , {"name" : 'rev'}

                         , {"name" : 'sideNav', 'id' : SIDE_NAV}
                         , {"name" : 'topNav', 'id' : TOP_NAV}
                         , {"name" : 'bottomNav', 'id' : BOTTOM_NAV}
                         , {"name" : 'navItem', 'id' : NAV_ITEM}

                         , {"name" : 'pg', 'id' : PG}

                         , {"name" : 'blog', 'id' : BLOG}
                         , {"name" : 'list', 'id' : LIST}
                         , {"name" : 'idx', 'id' : IDX}

                         , {"name" : 'form', 'id' : FORM}
                         , {"name" : 'cal', 'id' : CAL}
                         , {"name" : 'tag', 'id' : TAG}
                        ])
        ).promise();
    }
    , roots : function () {
        var dfd = Defrred();
        Deferred.when(
            createFn('Groups', {'id': ROOT_GRP, 'name':'administrators'})
            , createFn('Users', {'id': ROOT_USR, 'alias':'superuser', 'eMail': 'info@zadarsnova.hr'})
        ).then(function() {
            Deferred.when(
                createFn('UserGroups', {'id':1, 'userId': ROOT_USR, 'groupId' : ROOT_GRP})
                , createPg(PG, null, ROOT_PG, 'root')
            ).then(function (){
                Deferred.when(
                    createPg(PG, ROOT, NAV_ROOT_PG, 'nav')
                    , createPg(PG, ROOT, CAL_ROOT_PG, 'cal')
                    , createPg(FORM, FORM_ROOT_PG, 'form')
                ).then (function () {
                    dfd.resolve();
                });
            });
        });
        return dfd.promise();
    }
    , createSideNav : function () {
        var dfd = Deferred();
        var START_PG = NAV_ROOT_PG + 1;
        createPg(SIDE_NAV, NAV_ROOT_PG, START_PG, 'nav/side').then(function () {
            createAllPg(
                SIDE_NAV, START_PG, START_PG + 1, 'nav/side/', ['acme', 'platforma'], [{
                    'filePath' : 'base/nav/side_acme.html'
                    , 'mimeType' : 'text/x-handlebars-template' //arbitrary
                }, {
                    'filePath' : 'base/nav/side_platforma.html'
                    , 'mimeType' : 'text/x-handlebars-template' //arbitrary
                }]
            ).then (function () {
                Deferred.when(
                    createPg(NAV_ITEM_TMPL, START_PG + 1, START_PG + 3, 'nav/side/acme/items', {
                        'data' : {'latitude' :  '', 'longitute' : ''} //eg, for moonclock
                        , 'filePath' : 'base/nav/side_acme_item.html'
                        , 'mimeType' : 'text/x-handlebars-template' //arbitrary
                    })
                    , createPg(NAV_ITEM_TMPL, START_PG + 2, START_PG + 4, 'nav/side/platforma/items', {
                        'data' : {'leaves' : {'financiranje' : 'platforma/financiranje'
                                              , 'prostori' : 'platforma/prostori'
                                              , 'strategija' : 'platforma/strategija'}}
                        , 'filePath' : 'base/nav/side_platforma_item.html'
                        , 'mimeType' : 'text/x-handlebars-template' //arbitrary
                    })
                ).then (function () {
                    dfd.resolve();
                });
            });
        });
        return dfd.promise();
    }
    , createTopNav : function () {
        var dfd = Deferred();
        var START_PG = NAV_ROOT_PG + 6;
        createPg(TOP_NAV, NAV_ROOT_PG, START_PG, 'nav/top').then(function () {
            createAllPg(
                TOP_NAV, START_PG, START_PG + 1, 'nav/top/', ['acme', 'platforma'], [{
                    'filePath' : 'base/nav/top_acme.html'
                    , 'mimeType' : 'text/x-handlebars-template' //arbitrary
                }, {
                    'filePath' : 'base/nav/top_platforma.html'
                    , 'mimeType' : 'text/x-handlebars-template' //arbitrary
                }]
            ).then (function () {
                Deferred.when(
                    createPg(
                        NAV_ITEM_TMPL, START_PG + 1, START_PG + 3, 'nav/top/acme/items', {
                            'data' : {
                                'about' : 'acme/about' // XXX distinct from front?
                                , 'front' : 'acme/front'
                                , 'news' : 'acme/news'
                                , 'kalendar' : 'acme/cal'
                                , 'program': 'acme/program'
                            }
                            , 'filePath' : 'base/nav/top_acme_item.html'
                            , 'mimeType' : 'text/x-handlebars-template' //arbitrary
                        })
                    , createPg(
                        NAV_ITEM_TMPL, START_PG + 2, START_PG + 4, 'nav/top/platforma/items', {
                            'data' : {
                                'about' : 'platforma/about' // XXX distinct from front?
                                , 'front' : 'acme/front'
                                , 'index' : 'platforma/index'
                                , 'kalendar' : 'platforma/kalendar'
                                , 'aktivnosti' : 'platforma/aktivnosti'
                            }
                            , 'filePath' : 'base/nav/top_platforma_item.html'
                            , 'mimeType' : 'text/x-handlebars-template' //arbitrary
                        })
                ).then( function () {
                    dfd.resolve();
                });
            });
        });
        return dfd.promise();
    }
    , createBottomNav : function () {
        var dfd = Deferred();

        var START_PG = NAV_ROOT_PG + 6 + 5;
        createPg(
            BOTTOM_NAV, NAV_ROOT_PG, START_PG, 'navs/bottom', {
                'filePath' : 'base/nav/bottom.html'
                , 'mimeType' : 'text/x-handlebars-template' //arbitrary
            }).then(function () {
                createPg(
                    NAV_ITEM_TMPL, START_PG, START_PG + 1, 'nav/bottom/items', {
                        'data' : {'leaves' : {
                            'front' : ''
                            , 'acme' : 'acme'
                            , 'platforma' : 'platforma'
                            , 'kalendar' : 'kalendar'
                        }
                        , 'filePath' : 'base/nav/bottom_item.html'
                        , 'mimeType' : 'text/x-handlebars-template' //arbitrary
                    }
                }).then (function () {
                    dfd.resolve();
                });
            });

        return dfd.promise();
    }
    , createForm : function () {
        var dfd = Deferred();
        Deferred.when(
            createPg(FORM, FORM_ROOT_PG, null, 'form/basic', {
                'filePath' : 'base/forms/basic_form.html'
                , 'mimeType' : 'text/x-handlebars-template' //arbitrary
            })
            , createPg(FORM, FORM_ROOT_PG, null, 'form/md', {
                'filePath' : 'base/forms/markdown_form.html'
                , 'mimeType' : 'text/x-handlebars-template' //arbitrary
            })
            , createPg(FORM, FORM_ROOT_PG, null, 'form/usr', {
                'filePath' : 'base/forms/user_form.html'
                , 'mimeType' : 'text/x-handlebars-template' //arbitrary
            })
            , createPg(FORM, FORM_ROOT_PG, null, 'form/group', {
                'filePath' : 'base/forms/group_form.html'
                , 'mimeType' : 'text/x-handlebars-template' //arbitrary
            })
            , createPg(FORM, FORM_ROOT_PG, null, 'form/ns', {
                'filePath' : 'base/forms/ns_form.html'
                , 'mimeType' : 'text/x-handlebars-template' //arbitrary
            })
            , createPg(FORM, FORM_ROOT_PG, null, 'form/rev', {
                'filePath' : 'base/forms/rev_form.html'
                , 'mimeType' : 'text/x-handlebars-template' //arbitrary
            })
            , createPg(FORM, FORM_ROOT_PG, null, 'form/cal', {
                'filePath' : 'base/forms/cal_form.html'
                , 'mimeType' : 'text/x-handlebars-template' //arbitrary
            })
            , createPg(FORM, FORM_ROOT_PG, null, 'form/nav', {
                'filePath' : 'base/forms/nav_form.html'
                , 'mimeType' : 'text/x-handlebars-template' //arbitrary
            })
        ).then(function () {
            dfd.resolve();
        });
        return dfd.promise();
    }
    , createCal : function () {
        //TODO /cal categories
        csv()
            .from.path('base/cal.csv', {'delimiter': '\t','quote': '`', 'columns':true})
            .transform(function (row, index) {
                row['url'] = '/cal/' + index;
                return row;
            })
            .to.array(function(data){
                var url = data['url'];
                delete data['url'];
                createPg(CAL, CAL_ROOT_PG, null, url, data);
            } );
    }
    //TODO page categories/tags
    , createCat : function () {
        return Deferred.when(
            function () {} //XXX placeholder
            //createPg(TAG, TAG_ROOT_PG, null, 'acme', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'acme/about', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'acme/front', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'acme/news', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'acme/kalendar', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'acme/program', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'platforma', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'platforma/financiranje', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'platforma/prostori', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'platforma/strategija', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'platforma/about', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'platforma/front', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'platforma/index', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'platforma/kalendar', null, {})
            //createPg(TAG, TAG_ROOT_PG, null, 'platforma/aktivnosti', null, {})
        ).promise();
    }
}
