"use strict";

var Client = require('mariasql');
var Deferred = require( "JQDeferred");
var _ = require('underscore');

var dbq = require('server/dbq');
var dbinit = require('server/dbinit');

var c = new Client();

c.connect({
    host: '127.0.0.1',
    user: 'root',
    password: '888',
    db: 'preliminary'
});

c
    .on('error', function (err) {
        c.end();
        initFn();
    })
    .on('connect', function () {
        dbq.connect(c);
        dbinit.connect(c);
    });

// ns, nav, start form, cal

var initFn = function () {
    var dfd = Deferred();

    var empty = new Client();
    empty.connect({
        host: '127.0.0.1',
        user: 'root',
        password: '888'
    });

    empty.on('connect', function () {
        dbq.basicDbErr(
            empty.query('DROP DATABASE IF EXISTS preliminary')
                .on('result', function () {
                    dbq.basicDbErr(
                        empty.query('CREATE DATABASE IF NOT EXISTS preliminary')
                            .on('result', function () {
                                var connect = function (c) {
                                    dbq.connect(c);
                                    dbinit.connect(c);

                                    dbinit.mkFn().then(function () {
                                        empty.end();
                                        dbinit.createNs().then(function () {
                                            dbinit.roots().then(function () {
                                                Deferred.when(
                                                    dbinit.createSideNav()
                                                    , dbinit.createTopNav()
                                                    , dbinit.createBottomNav()
                                                    , dbinit.createForm()
                                                    , dbinit.createCal()
                                                    , dbinit.createCat()
                                                ).then(function () {
                                                    dfd.resolve();
                                                });
                                            });
                                        });
                                    });
                                };

                                if (c) {
                                    return connect(c);
                                }

                                c.connect({
                                    host: '127.0.0.1',
                                    user: 'root',
                                    password: '888',
                                    db: 'preliminary'
                                });

                                basicDbErr(
                                    c.on('connect', function () {
                                        connect(c);
                                    }));
                            }));
                }));
    });

    return dfd.promise();
};



module.exports = {

    listDB: function () { //XXX not really needed, just some random old dbg tool
        var acc = [];
        var dfd = Deferred();
        basicDbErr(
            c.query('SHOW DATABASES')
                .on('result', function(dbres) {
                    basicDbErr(
                        dbres
                            .on('row', function (row) {

                                acc.push(row);  //XXX should become a dict if it isn't

                            })
                            .on('end', function () {
                                dfd.resolve(acc);
                            }), acc);
                }));
        return dfd.promise();
    }
    , init : initFn
    , create : dbinit.createFn
    , readAll : function (table, q) {
        var acc = [];
        var dfd = Deferred();

        dbq.basicDbErr(
            c.query(dbq.readAllQ(table, _.keys(q))(q))
                .on('result', function (dbres) {
                    dbq.basicDbErr(
                        dbres
                            .on('row', function (row) {
                                acc.push(row);  //XXX should become a dict if it isn't
                            })
                            .on('end', function () {
                                dfd.resolve(acc);
                            }), acc);
                }));
        return dfd.promise();
    }
    , read : function (table, id) {
        var dfd = Deferred();
        dbq.basicDbErr(
            c.query(dbq.readQ(table)({'id': id}))
                .on('result', function (dbres) {
                    dbq.basicDbErr(
                        dbres.on('row', function (row) {
                            dfd.resolve(row); //XXX should become a dict if it isn't
                        }));
                }));
        return dfd.promise();
    }
    , update : function (table, id, values) {
        var dfd = Deferred();
        values.id = id;
        dbq.basicDbErr(
            c.query(dbq.updateQ(table, values)(values))
                .on('result', function (dbres) {
                    dbq.basicDbErr(
                        dbres.on('end', function (info) {
                            dfd.resolve(info);
                        }));
                }));
        return dfd.promise();
    }
    , del :  function (table, id) {
        var dfd = Deferred();
        dbq.basicDbErr(
            c.query(dbq.deleteQ(table)({'id': id}))
                .on('result', function (dbres) {
                    dbq.basicDbErr(
                        dbres.on('end', function (info) {
                            dfd.resolve(info);
                        }));
                }));
        return dfd.promise();
    }
}
